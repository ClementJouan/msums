#include <iostream>


#include "msumsoptions.h"

using namespace std;


void MSUMSOptions::do_print_help()
	{
	cout <<
	"msums [-i FILE] [-k | -K FILE] [-o FILE] [-h] [-l] [[-s|-S STATLIST]...] "
	"[[-p|-P POPLIST]...]\n\n";
	cout <<
	"Example of a command line: \n"
	"msums -i my_input.txt -k my_mask.txt -S all -o my_stats.txt\n\n";
	cout <<
	"-i, --init FILE       Use this initialization file. [spinput.txt]\n"
	"-o, --output FILE     Use this output file. [ABCstat.txt]\n"
	"-k, --mask FILE       Load (and use) mask file [], statistics are standardized by \n"
	"		       the number of unmasked sites rather than by the locus length. \n"
	"-K, --mask FILE       Load (and use) mask file [], statistics are computed \n"
	"		       by the locus length. \n"
	"-h, --help            Print the help text and exit.\n"
	"-a, --list_stats      Print list of available stats and exit.\n"
	"-l, --print_per_locus Compute stats per locus, don't compute aggregate values.\n"
	"                      [false]\n"
	"-S, --keepStats LIST  Compute stats in LIST. LIST is a space-separated list of\n"
	"                      stat names. 'all' selects all stats.\n"
	"-s, --dropStats LIST  Do *not* compute stats in LIST (see above).\n"
	"-P, --keepPops LIST   Compute populations or pairs in LIST. Populations can be\n"
	"                      specified as single number (e.g. '2'), or range \n"
	"                      (e.g. '1-5'). Pairs are specifies as p1xp2 (e.g. '1x2').\n"
	"                      'all' selects all populations, 'allxall' all pairs.\n"
	"-p, --dropPops LIST   Do *not* compute populations/pairs in LIST (see above).\n"
	"-m, --multiStats LIST Compute multi-population statistics in LIST. Use e.g. as:\n"
	"		       -m f3 0x1x2 -m var\n "
	"		       -m f4 1x4x5x6 \n "
	"                      -m rndmin 0x2x1 with 1 being the outgroup. \n "
	"                      -m rndminO 0x2xn with n being any number. It computes RNDmin with \n"
	"		       an outgroup corresponding to a pseudo-ancestral sequence (a succession of 0). \n "
	"		       /!\\ Numbers represent populations in range 0...n. \n ";
	}

void MSUMSOptions::do_list_stats()
	{
	cout <<
    "### Conventions\n"
    "- The suffixes 'mean' and 'std' stand for mean and standard deviation,\n"
    "    respectively.\n"
    "- 'pop' and 'pops' stand for population and populations, respectively.\n"
    "- Populations are referred by indexes _i_ and _j_ and can range from\n"
    "    0 to n, where n is the number of sampled populations.\n"
    "    E.g. 'FST_ixj_mean': mean Fst across loci between\n"
    "    populations _i_ and _j_.\n"
    "- The coding of ancestral/derived alleles follow the ms convention:\n"
    "    0 -> ancestral\n"
    "    1 -> derived\n"
    "- Sampled alleles at a given SNP are represented by strings of 0s and 1s,\n"
    "    where populations are separated by a slash.\n"
    "    E.g., '0100/110101' represents the alleles of a SNP for which one\n"
    "    has sampled 4 and 6 chromosomes from population _i_ and _j_,\n"
    "    respectively.\n\n"
    "#### Within population statistics\n"
    "pairdif         sum of pairwise allele difference.\n"
    "segr            number of segregating sites (i.e. SNPs) per locus.\n"
    "singlet         overall number of singleton alleles (across all sites).\n"
    "thpi            Tajima's Theta, i.e. nucleotide diversity. \n"
    "		     Normalized by the locus length.\n"
    "thpi_seg        Tajima's Theta, i.e. nucleotide diversity. \n"
    "		     Normalized by the number of segsites.\n"
    "thW             Watterson Theta.\n"
    "flDstar         Fu & Li’s D*.\n"
    "flFstar         Fu & Li’s F*.\n"
    "tD              Tajima's D.\n"
    "R2              Ramos-Onsins R2 test.\n"
    "                    (Ramos-Onsins & Rozas, Mol.Biol.Evol 2002).\n"
    "#### Between population statistics\n"
    "d_ixj           Raw nucleotidic divergence between pops i and j\n"
    "                    (Nei's Dxy, eq. 12.66, Nei and Kumar 2000).\n"
    "dn_ixj          Net nucleotidic divergence between pops i and j\n"
    "                    (Nei's DA, eq. 12.67, Nei and Kumar 2000).\n"
    "FST_ixj         FST sensu Hudson or Nst: (1-(pi_i+pi_j)/2)/pi_total.\n"
    "bialsites_ixj   mean number of bi-allelic sites per pop\n"
    "                    (infinite site model [**useful precision?**]).\n"
    "                    (number of bi-allelic sites in pop_i +\n"
    "                    number of bi-allelic sites in pop_j)/2\n"
    "multisites_ixj  mean number of multi-allelic (more than 2 alleles)\n"
    "                    sites per pop (infinite site model).\n"
    "                    I.e. (number of multi-allelic sites in pop_i +\n"
    "                    number of multi-allelic sites in pop_j)/2\n"
    "                    [to be checked]\n"
    "sfA_ixj         number of sites fixed for the derived allele in\n"
    "                    pop_A  and fixed for the ancestral allele in\n"
    "                    pop_B (1111/0000), where A=i and B=j.\n"
    "sfB_ixj         number of sites fixed for the ancestral allele in\n"
    "                    pop_A and fixed for the derived allele in\n"
    "                    pop_B (0000/1111), where A=i and B=j.\n"
    "sfout_ixj       **?** [to be checked]\n"
    "sxA_ixj         number of sites polymorphic in pop_A and fixed\n"
    "                    for the ancestral allele in pop_B (0101/0000),\n"
    "                    where A=i and B=j .\n"
    "sxB_ixj         number of sites fixed for the ancestral allele in\n"
    "                    pop_A and polymorphic in pop_B (0000/0101),\n"
    "                    where A=i and B=j .\n"
    "sxAfB_ixj       number of sites polymorphic in pop_A and fixed\n"
    "                    for the derived allele in pop_B (0101/1111),\n"
    "                    where A=i and B=j.\n"
    "sxBfA_ixj       number of sites fixed for the derived allele in\n"
    "                    pop_A and polymorphic in pop_B (1111/0010),\n"
    "                    where A=i and B=j.\n"
    "ss_ixj          number of sites with shared derived alleles between\n"
    "                    pop_i and pop_j (1010/1110). Mean over pops.\n"
    "                    [to be checked this stat should be symetrical\n"
    "                    between pops, so that the mean equal the value in\n"
    "                    each pop_Actually unless we divide by the total\n"
    "                    number of pops (that might be different from 2 but\n"
    "                    that would be surprising.]\n"
    "Rf_ixj          see Navascues et al. BMC Evol. Biol. 2014.\n"
    "                    [to be detailed]\n"
    "Rs_ixj          see Navascues et al. BMC Evol. Biol. 2014.\n"
    "                    [to be detailed]\n"
    "Wx2s1_ixj       see Navascues et al. BMC Evol. Biol. 2014.\n"
    "                    [to be detailed]\n"
    "Wx1s2_ixj       see Navascues et al. BMC Evol. Biol. 2014.\n"
    "                    [to be detailed]\n"
 
    "#### Multi-population statistics (more than two populations).\n"
    "     Those are Patterson's test described in Patterson et al. Genetics 2012.\n"
    "pattf3          \n"
    "                    [to be detailed]\n"
    "pattf4        \n"
    "                    [to be detailed]\n"
    "pattDixj_    \n"
    "                    Patterson's D statistic used in the 'ABBA-BABA' test\n"
    "                    (Patterson et al. Genetics 2012).\n"
    "RNDmin    \n"
    "                    see Rosenzweig et al. Mol Ecol. 2016 Jun; 25(11): 2387-2397. \n"
    "			 RNDmin = dmin / out \n "
    "			 with dmin = min(d_ixj) and dout = (d_ixO + d_jxO)/2 \n"
    "			 O being the outgroup. \n ";
	}
